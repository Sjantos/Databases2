/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import bd2.DBConnect;
import java.awt.GridLayout;
import java.awt.Label;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Jantos
 */
public class JFrameSearch extends javax.swing.JFrame {
    DBConnect connect;
    JTable table;
    LinkedList<JTextField> textFields;
    JFrame parent;
    String tableSelectedName;
    /**
     * Creates new form JFrameSearch
     */
    public JFrameSearch(JTable table, JFrame frame, String tName, DBConnect con) {
        initComponents();
        connect = con;
        parent = frame;
        tableSelectedName = tName;
        int numberOfColumns = table.getColumnCount();
        panelSearchOptions.setLayout(new GridLayout(2*numberOfColumns, 1, 4, 4));
        textFields = new LinkedList<JTextField>();
        for (int i = 0; i < 2*numberOfColumns; i++) {
            if(i%2 == 1)
            {
                panelSearchOptions.add(new Label(table.getColumnName(i/2)), i-1);
            }
            else
            {
                textFields.add(new JTextField());
                panelSearchOptions.add(textFields.getLast(), i);
            }
        }
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
        int textFieldsSize = textFields.size();
        for(int i=0; i < textFieldsSize; i++)
        {
            textFields.get(i).getDocument().addDocumentListener(new DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent e) {
                    UpdateSearch();
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                    UpdateSearch();
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                    UpdateSearch();
                }
            });
        }
    }
    
    private void UpdateSearch()
    {
        LinkedList<String> arguments = new LinkedList<String>();
        for (int i = 0; i < textFields.size(); i++) {
            String text = textFields.get(i).getText();
            if(text.equals(""))
                text = "%";
            arguments.add(text);
            System.out.println(text);
        }
        
        Connection con = connect.getConnection();
        LinkedList<String> columnNames = new LinkedList<String>();
        for (int i = 0; i < table.getColumnCount(); i++) {
            columnNames.add(table.getColumnName(i));
        }
        //StringBuilder call = new StringBuilder("{call TU WSTAWIÄ† PROCEDURE(");
        //SELECT * FROM clients WHERE (city LIKE '%') AND (clientName LIKE '%')
        StringBuilder call = new StringBuilder("{SELECT * FROM "+tableSelectedName+" WHERE ");
        for (int i = 0; i < arguments.size(); i++) {
            call.append("(");
            call.append()
        }
        call.append(")}");
        
        CallableStatement myStmt = null;
        try{
        myStmt = con.prepareCall(call.toString());
            for (int i = 0; i < arguments.size(); i++) {
                myStmt.setString(i, arguments.get(i));
            }
        myStmt.execute();
        } catch (SQLException ex) {
                Logger.getLogger(DBConnect.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try{
        table.setModel(DbUtils.resultSetToTableModel(myStmt.getResultSet()));
        } catch (SQLException ex) {
                Logger.getLogger(DBConnect.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelSearchOptions = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout panelSearchOptionsLayout = new javax.swing.GroupLayout(panelSearchOptions);
        panelSearchOptions.setLayout(panelSearchOptionsLayout);
        panelSearchOptionsLayout.setHorizontalGroup(
            panelSearchOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        panelSearchOptionsLayout.setVerticalGroup(
            panelSearchOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        getContentPane().add(panelSearchOptions, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelSearchOptions;
    // End of variables declaration//GEN-END:variables
}
